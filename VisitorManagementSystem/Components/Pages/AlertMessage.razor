@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IJSRuntime JSRuntime


<script>
    function dismissAlert(id) {
        document.getElementById(id).classList.remove('show');
    }
</script>

@if (!string.IsNullOrWhiteSpace(Message))
{
    <div class="alert @alertClass alert-dismissible fade show" role="alert" id="alert-message">
        <strong>@Message</strong>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@code {
    [Parameter]
    public string Message { get; set; }
    private Models.AlertMessageType messageType;

    [Parameter]
    public Models.AlertMessageType MessageType
    {
        get => messageType;
        set
        {
            messageType = value;
            switch (messageType)
            {
                case Models.AlertMessageType.Error:
                    alertClass = "alert-danger";
                    break;
                case Models.AlertMessageType.Warning:
                    alertClass = "alert-warning";
                    break;
                case Models.AlertMessageType.Success:
                    alertClass = "alert-success";
                    break;
                default:
                    break;
            }
            JSRuntime.InvokeVoidAsync("setTimeout", () => JSRuntime.InvokeVoidAsync("dismissAlert", "alert-message"), 5000);
        }
    }
    string alertClass = "alert-info";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && !string.IsNullOrWhiteSpace(Message))
        {
            JSRuntime.InvokeVoidAsync("setTimeout", () => JSRuntime.InvokeVoidAsync("dismissAlert", "alert-message"), 5000);
        }
    }

    void HideMessage()
    {
        Message = string.Empty;
    }
}

