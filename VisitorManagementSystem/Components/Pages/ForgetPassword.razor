@page "/forgetpassword"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization


@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IJSRuntime JS
@inject IVDataService VDataService

<style>
    .mainDiv {
    display: flex;
    min-height: 100%;
    align-items: center;
    justify-content: center;
    background-color: #f9f9f9;
    font-family: 'Open Sans', sans-serif;
  }
 .cardStyle {
    width: 500px;
    border-color: white;
    background: #fff;
    padding: 36px 0;
    border-radius: 4px;
    margin: 30px 0;
    box-shadow: 0px 0 2px 0 rgba(0,0,0,0.25);
  }
#signupLogo {
  max-height: 100px;
  margin: auto;
  display: flex;
  flex-direction: column;
}
.formTitle{
  font-weight: 600;
  margin-top: 20px;
  color: #2F2D3B;
  text-align: center;
}
.inputLabel {
  font-size: 12px;
  color: #555;
  margin-bottom: 6px;
  margin-top: 24px;
}
  .inputDiv {
    width: 70%;
    display: flex;
    flex-direction: column;
    margin: auto;
  }

    .errDiv {
        width: 70%;
        display: flex;
        flex-direction: column;
        margin: auto;
        font-size: 75%;
        
    }
input {
  height: 40px;
  font-size: 16px;
  border-radius: 4px;
  border: none;
  border: solid 1px #ccc;
  padding: 0 11px;
}
input:disabled {
  cursor: not-allowed;
  border: solid 1px #eee;
}
.buttonWrapper {
  margin-top: 40px;
}
  .submitButton {
    width: 70%;
    height: 40px;
    margin: auto;
    display: block;
    color: #fff;
    background-color: #065492;
    border-color: #065492;
    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.12);
    box-shadow: 0 2px 0 rgba(0, 0, 0, 0.035);
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
  }
.submitButton:disabled,
button[disabled] {
  border: 1px solid #cccccc;
  background-color: #cccccc;
  color: #666666;
}

#loader {
  position: absolute;
  z-index: 1;
  margin: -2px 0 0 10px;
  border: 4px solid #f3f3f3;
  border-radius: 50%;
  border-top: 4px solid #666666;
  width: 14px;
  height: 14px;
  -webkit-animation: spin 2s linear infinite;
  animation: spin 2s linear infinite;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>

<PageTitle>
    Forget Password
</PageTitle>

<div class="mainDiv">
    <div class="cardStyle">
        <EditForm Model="@ForgetPassModel" OnValidSubmit="ChangePasswordConfirm" FormName="ChangePassForm" action="" method="post" name="signupForm" id="signupForm">
            <DataAnnotationsValidator />
            <img src="/RehlkoLogo/rehlko_symbol_graphic_new_energy_blue_rgb.png" id="signupLogo" />

            <h2 class="formTitle">
                Forget Password
            </h2>

            <div class="inputDiv">
                <label class="inputLabel" for="email">Email</label>
                <InputText type="email" id="email" name="email" required @bind-Value="ForgetPassModel.EmpMail" />
                <ValidationMessage For="() => ForgetPassModel.EmpMail" />
            </div>
            
            <div class="inputDiv">
                <label class="inputLabel" for="numberprop">OTP</label>
                <InputNumber type="number" id="numberprop" required @bind-Value="ForgetPassModel.OTP" />
                <ValidationMessage For="() => ForgetPassModel.OTP" />
                <label class="fs-5" style="color: @otpMsgColor" for="numberprop">@otpMsg</label>
            </div>

            <div class="inputDiv">
                <label class="inputLabel" for="confirmPassword">New Password</label>
                <InputText type="password" id="confirmPassword" name="confirmPassword" required @bind-Value="ForgetPassModel.NewPassword" />
                <ValidationMessage For="() => ForgetPassModel.NewPassword" />
            </div>

            <div class="inputDiv">
                <label class="inputLabel" for="confirmPassword">Confirm Password</label>
                <InputText type="password" id="confirmPassword" name="confirmPassword" required @bind-Value="ForgetPassModel.ConfirmNewPassword" />
                <ValidationMessage For="() => ForgetPassModel.ConfirmNewPassword" />
            </div>

            <div class="buttonWrapper">
                <button type="submit" id="submitButton" class="submitButton pure-button pure-button-primary">
                    <span>Submit</span>
                    @if(loader == true)
                    {
                        <span id="loader"></span>
                    }
                    
                </button>
               
            </div>
            <div class="errDiv mt-1">
                <label class="text-danger">@errMsg</label>
            </div>

        </EditForm>
    </div>
</div>


@code{
    bool loader = false;
    string errMsg = string.Empty;
    public ChangePassModel ForgetPassModel { get; set; } = new();

    string otpMsg = string.Empty;
    string otpMsgColor = string.Empty;


    private async Task ChangePasswordConfirm()
    {
        loader = true;
        if (ForgetPassModel.OldPassword == empData.FirstOrDefault(x => x.EmpEmail.ToLower() == _eMail).Password)
        {
            if (ForgetPassModel.NewPassword == ForgetPassModel.ConfirmNewPassword)
            {
                await VDataService.UpdatePassword(_eMail, ForgetPassModel.ConfirmNewPassword);
                NavigationManager.NavigateTo("/logout", true);
            }
            else
            {
                errMsg = "New Password and Confirm Password are not same!";
                loader = false;
            }
        }
        else
        {
            errMsg = "Old Password is not correct!";
            loader = false;
        }
    }



    //-----------------------------Get Name of Requiter-----------------------
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    List<EmpData>? empData = null;

    private string? userName;
    //private string? bossEmail;

    private string _eMail { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        // try
        // {
        //     var authenticationState = await authenticationStateTask;
        //     if (authenticationState.User.Identity.IsAuthenticated)
        //     {
        //         string email = authenticationState.User.Identity.Name;

        //         _eMail = email;
        //         empData = await VDataService.GetEmpData();
               
        //     }
        //     else
        //     {
        //         NavigationManager.NavigateTo("/login", true);
        //     }

            
        // }
        // catch (Exception ex)
        // {

        // }

    }

    public class ChangePassModel
    {
        [Required(AllowEmptyStrings = false, ErrorMessage = "Please provide Email")]
        public string? OldPassword { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Please provide Email")]
        public string? EmpMail { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Please provide OTP")]
        public int OTP { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Please provide New Password")]
        public string? NewPassword { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Please Confirm New Password")]
        public string? ConfirmNewPassword { get; set; }
    }
}