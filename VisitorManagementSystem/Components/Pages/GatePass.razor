@page "/gatepass"

@using MailKit.Net.Smtp
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin, Security")]

@inject IVDataService VDataService
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@* @rendermode InteractiveServer *@

@using Microsoft.AspNetCore
@using System.Drawing;
@using MimeKit
@using QRCoder;
@using System.Drawing.Imaging;

@using SixLabors.Fonts;
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Drawing;
@using SixLabors.ImageSharp.Drawing.Processing;
@using SixLabors.ImageSharp.Formats.Jpeg
@using SixLabors.ImageSharp.PixelFormats;
@using SixLabors.ImageSharp.Processing;

@using System.Security.Claims
@using VisitorManagementSystem.Components.Pages.Shared
@using VisitorManagementSystem.Data
@inject IJSRuntime JS

@inject NavigationManager NavigationManager
@inject VMSDbContext vmsDbContext


<PageTitle>Gate Pass</PageTitle>

<style>


    .button-14 {
        background-image: linear-gradient(#f7f8fa,#e7e9ec);
        border-color: #adb1b8 #a2a6ac #8d9096;
        border-style: solid;
        border-width: 1px;
        border-radius: 3px;
        box-shadow: rgba(255,255,255,.6) 0 1px 0 inset;
        box-sizing: border-box;
        color: #0f1111;
        cursor: pointer;
        display: inline-block;
        font-family: "Amazon Ember",Arial,sans-serif;
        font-size: 14px;
        height: 29px;
        font-size: 13px;
        outline: 0;
        overflow: hidden;
        padding: 0 11px;
        text-align: center;
        text-decoration: none;
        text-overflow: ellipsis;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        white-space: nowrap;
        margin-left: 10px;
    }

    .button-14:active {
        border-bottom-color: #a2a6ac;
    }

        .button-14:active:hover {
            border-bottom-color: #a2a6ac;
        }

    .button-14:hover {
        border-color: #a2a6ac #979aa1 #82858a;
    }

    .button-14:focus {
        border-color: #e77600;
        box-shadow: rgba(228, 121, 17, .5) 0 0 3px 2px;
        outline: 0;
    }
    .A6 {
        width: 9.7cm; /* A6 paper size is 148x105mm */
        height: 14cm;
        max-width: 9.7cm;
        max-height: 14cm;
        border: 1px solid black;
        padding: 5px;
        box-sizing: border-box;
        overflow: hidden;
        align-items: center;
        justify-content: center;


    }
    .divBody{
        display: flex;
        align-items: center;
    }

    .input-container {
        position: relative;
    }

    .search-input {
        padding: 0.5rem 0.5rem 0.5rem 3rem;
        width: 100%;
        box-sizing: border-box;
        border: 1px solid #ccc;
    }

    .close-icon {
        position: absolute;
        top: 50%;
        right: 0.75rem;
        transform: translateY(-50%);
        fill: #999;
        width: 1.5rem;
        height: 1.5rem;
    }
    .margindef{
        margin: 0;
        padding: 0;
    }

    .searchInput {
        border: 1px solid #333;
        background-color: #f7f7f7;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
        border-radius: 20px;
    }



</style>

@*<script>
    function printDiv(divId) {
        var div = document.getElementById(divId);
        var wnd = window.open();
        wnd.document.write(div.outerHTML);
        wnd.print();
        wnd.close();
    }


</script>*@@*
<script>
    function printDiv() {
        var printContents = document.getElementById("printableDiv").innerHTML;
        var originalContents = document.body.innerHTML;

        document.body.innerHTML = printContents;

        window.print();
        document.body.innerHTML = originalContents;
        location.reload();
    }
</script>*@



   <script>
    function printDiv() {
        setTimeout(function() {
            var printContents = document.getElementById("printableDiv").innerHTML;
            var originalContents = document.body.innerHTML;

            document.body.innerHTML = printContents;

            // Print settings
            var style = "<style>@@media print { body { margin: 0.2in 0.35in 0 0.2in; } }</style>";
            document.head.innerHTML += style;

            window.print();

            document.body.innerHTML = originalContents;
            location.reload();
        }, 500); 
    }

    // Call the print function automatically
    window.addEventListener("DOMContentLoaded", printDiv);
</script>

@* <script>

    function printDiv() {
      var printContents = document.getElementById("printableDiv").innerHTML;
      var originalContents = document.body.innerHTML;

      document.body.innerHTML = printContents;

      // Print settings
      var style = "<style>@@media print { body { margin: 0.2in 0.35in 0 0.2in; } }</style>";
      document.head.innerHTML += style;

      window.print();

      document.body.innerHTML = originalContents;
      // Remove the page reload, as it might not be desirable
      // location.reload();
    }
</script> *@
<script>
    function showModal() {
        var modal = document.getElementById('photoModel');
        modal.classList.add('show');
        modal.style.display = 'block';
    }

    function hideModal() {
        var modal = document.getElementById('photoModel');
        modal.classList.remove('show');
        modal.style.display = 'none';
    }
</script>

<style>
    .list-group-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .float-right {
        margin-left: auto;
    }

    .float-left {
        margin-right: auto;
    }


    .loader {
        position: relative;
        width: 250px;
        height: 250px;
        border-radius: 50%;
        background: linear-gradient(#f07e6e, #84cdfa, #5ad1cd);
        animation: animate 1.2s linear infinite;
    }

    @@keyframes animate {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .loader span {
        position: absolute;
        width: 100%;
        height: 100%;
        border-radius: 50%;
        background: linear-gradient(#f07e6e, #84cdfa, #5ad1cd);
    }

    .loader-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-left: 7%;
        z-index: 1000; /* make sure it's on top of other elements */
    }

    .loader span:nth-child(1) {
        filter: blur(5px);
    }

    .loader span:nth-child(2) {
        filter: blur(10px);
    }

    .loader span:nth-child(3) {
        filter: blur(25px);
    }

    .loader span:nth-child(4) {
        filter: blur(50px);
    }

    .loader:after {
        content: '';
        position: absolute;
        top: 10px;
        left: 10px;
        right: 10px;
        bottom: 10px;
        background: #f1f1f1;
        border: solid white 10px;
        border-radius: 50%;
    }


    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* adjust the opacity to your liking */
        z-index: 1000; /* make sure it's on top of everything else */
    }



    .downloadText {
        position: relative;
        font-family: sans-serif;
        font-size: 15px;
        text-transform: uppercase;
        letter-spacing: 2px;
        overflow: hidden;
        background: linear-gradient(90deg, #000, #fff, #000);
        background-repeat: no-repeat;
        background-size: 80%;
        animation: animateP 3s linear infinite;
        -webkit-background-clip: text;
        -webkit-text-fill-color: rgba(255, 255, 255, 0);
    }

    @@keyframes animateP {
        0% {
            background-position: -500%;
        }

        100% {
            background-position: 500%;
        }
    }
</style>

@if (processing == true)
{
    <div class="overlay" />
    <div class="loader-container">
        <div class="loader">

            <span></span>
            <span></span>
            <span></span>
            <span></span>
        </div>
    </div>
    <div class="loader-container">
        <p class="downloadText">Processing...</p>
    </div>
}
<div class="row">
    <div class="d-flex justify-content-between">
        <div>
            <h4 class="h3 mb-0 text-gray-800" style="text-shadow: 1px 1px 2px rgba(0,0,0,0.5);font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif">Gate Pass</h4>
        </div>
        <div>
            <input @bind="searchVisitor" @bind:event="oninput" class="form-control me-2 searchInput" type="search" placeholder="Search Visitor(Name/Mob/ID)..." aria-label="Search..." />
        </div>


    </div>
</div>




@*<SearchBox Visitors="vData" OnSearch="UpdateFilteredVisitors"></SearchBox>*@

<br />

<div class="row">



    <div class="table-responsive col-xl-12 col-md-6 mb-sm-5">
        <div class="col-sm-12 mr-1">
            @if (filteredvisitors == null && vDetails == null)
            {
                <span>Loading...</span>
            }
            else if (filteredvisitors.Count == 0 && vDetails == null)
            {
                <span>No Data Found.</span>
            }
            else
            {

                <table class="table table-striped table-bordered border-secondary-subtle shadow mb-sm-5  align-middle table-condensed"> <!--mb-md-0-->
                    <thead class="table-dark">
                        <tr>
                            <th>Visitor Name</th>

                            <th>Mob</th>

                            <th>Dept</th>
                            <th>To Visit</th>
                            <th>Visit Date</th>
                            <th>Dur</th>
                            <th>To Date</th>
                            <th>Visit Time</th>
                            <th>Photo</th>
                            <th>Approval</th>
                            <th>Safety Check</th>
                            <th align="center">GatePass</th>
                            <th align="center">Delete</th>
                            <!-- <th>Visitor Photo</th> -->
                        </tr>
                    </thead>
                    <tbody class="table-group-divider">
                        @foreach (var vd in filteredvisitor.OrderByDescending(v => v.VisitingDetails.VisitTime))
                        {



                            <tr>


                                <td>@vd.VisitorData.FirstName @vd.VisitorData.LastName</td>

                                <td>@vd.VisitorData.MobileNo</td>

                                @foreach (var dept in dData)
                                {
                                    if (vd.VisitingDetails.CompanyDepartment == dept.DeptId)
                                    {
                                        <td>@dept.DeptName</td>
                                    }
                                }
                                <td>@vd.VisitingDetails.ApprovedBy</td>
                                <td>@vd.VisitingDetails.VisitDate</td>
                                <td>@vd.VisitingDetails.Duration</td>
                                <td>@vd.VisitingDetails.ToDate</td>
                                <td>@DateTime.Parse(vd.VisitingDetails.VisitTime).ToShortTimeString()</td>


                                @if (vd.VisitorData.ImageData != null)
                                {
                                    var base64String = Convert.ToBase64String(vd.VisitorData.ImageData);
                                    imageUrl = $"data:image/{GetImageFormat(vd.VisitorData.ImageData)};base64,{base64String}";
                                    <td><div class="d-flex">
                                            <img src="@imageUrl" width="35" height="35" alt="Visitor" class="rounded mx-auto d-block" @onclick="() => ShowPhoto(vd.VisitorData.ImageData, vd.VisitorData.Id)" />
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="darkblue" class="bi bi-pencil-fill" viewBox="0 0 16 16" @onclick="() => StartVideo(vd.VisitorData.Id)" data-bs-toggle="modal" data-bs-target="#exampleModalVid" role="button">
                                                <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z" />
                                            </svg>
                                        </div></td>
                                }
                                else{
                                    <td>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" fill="darkblue" class="bi bi-camera" viewBox="0 0 16 16" @onclick="() => StartVideo(vd.VisitorData.Id)" data-bs-toggle="modal" data-bs-target="#exampleModalVid" role="button">
                                            <path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4z" />
                                            <path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5m0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7M3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0" />
                                        </svg>
                                    </td>

                                }
                                @if (vd.VisitingDetails.Approval == "Approved" || vd.VisitingDetails.SecurityApproval == "Yes")
                                {
                                    <td class="text-success fw-bold">Approved</td>
                                }
                                else if(vd.VisitingDetails.Approval == "Cancelled"){
                                    <td class="text-danger fw-bold">Cancelled</td>
                                }
                                else
                                {
                                    <td class="text-danger fw-bold">Pending<br /><button class="btn btn-link m-0 p-0" data-bs-toggle="modal" data-bs-target="#securityModel" @onclick="()=>SecurityApproval(vd.VisitingDetails.VisitorId, vd.VisitingDetails.VisitDate, vd.VisitingDetails.Id)">Security Approve</button></td>

                                }


                                @if (vd.VisitingDetails.SafetyStatus is null)
                                {
                                    @if ((vd.VisitingDetails.SecurityApproval == "Yes" || vd.VisitingDetails.Approval == "Approved") && vd.VisitorData.ImageData != null)
                                    {
                                        string modalNameSafety = string.Empty;
                                        if (vd.VisitingDetails.VisitArea == true)
                                        {
                                            modalNameSafety = "#staticBackdropAdmin";
                                        }
                                        else
                                        {
                                            modalNameSafety = "#staticBackdrop";
                                        }

                                        <td><button type="button" class="btn btn-link text-danger fw-bold" data-bs-toggle="modal" data-bs-target=@modalNameSafety @onclick="()=>SafetyCheck(vd.VisitingDetails.VisitorId, vd.VisitingDetails.VisitDate, vd.VisitingDetails.Id)">Check Safety</button></td>
                                    }
                                    else if (vd.VisitingDetails.Approval == "Cancelled")
                                    {
                                        <td class="text-danger fw-bold">NA</td>
                                    }
                                    else if (vd.VisitorData.ImageData == null)
                                    {
                                        <td class="text-danger fw-bold">Photo Required</td>
                                    }
                                    else
                                    {
                                        <td class="text-danger fw-bold">Approval Pending</td>
                                    }

                                }
                                else
                                {
                                    <td class="text-success fw-bold">Safety Approved</td>
                                }



                                @if (vd.VisitingDetails.Approval == "Cancelled")
                                {
                                    <td class="text-danger fw-bold">NA</td>
                                }

                                else if (vd.VisitorData.ImageData == null)
                                {
                                    <td>Photo Required</td>
                                }
                                else if (vd.VisitingDetails.SafetyStatus == null)
                                {
                                    <td>Safety Pending</td>
                                }
                                else if (vd.VisitingDetails.SecurityApproval == "Yes" || vd.VisitingDetails.Approval == "Approved")
                                {
                                    <td align="center">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" fill="#007399" class="bi bi-pass-fill" role="button" viewBox="0 0 16 16" @onclick="()=>CreateGatePass(vd.VisitingDetails.Id)" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                            <path d="M10 0a2 2 0 1 1-4 0H3.5A1.5 1.5 0 0 0 2 1.5v13A1.5 1.5 0 0 0 3.5 16h9a1.5 1.5 0 0 0 1.5-1.5v-13A1.5 1.5 0 0 0 12.5 0zM4.5 5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1m0 2h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1 0-1" />
                                        </svg>
                                    </td>
                                }

                                @{
                                    var opp = vTransactions.Where(x => x.VDetails_Id == vd.VisitingDetails.Id).ToList();
                                }
                                @if (!opp.Any())
                                {
                                    <td>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red" class="bi bi-trash3" role="button" aria-expanded="false" viewBox="0 0 16 16" data-bs-toggle="modal" data-bs-target="#deleteVDetails" @onclick="()=>DeleteVDet(vd.VisitingDetails.Id)">
                                            <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                        </svg>
                                    </td>
                                }
                                else{
                                    <td></td>
                                }
                               


                            </tr>

                        }
                    </tbody>
                </table>

            }
        </div>
    </div>

</div>
@*
<div class="input-group">
    <div class="col-sm-6">
        <label class="mb-3">QR Code Text</label>
        <input type="text" @bind-value="QRCodeText" placeholder="Enter your text" class="form-control mb-4" />
        <button  @onclick="GenerateQRCode" class="btn btn-success">Generate QR Code</button>
    </div>
</div>

<img alt="" src="@QRByte" width="300" class="mb-5" />


<div id="printableDiv" class="A6">
    <h4><b>KOHLER. </b>ENGINES</h4>
    <p>Kohler Energy Pvt. Ltd. Aurangabad</p>
    <p>J-2/1, MIDC Industrial Area, Chikhalthana Aurangabad 431210. India</p>

    <div class="divBody">
        <img src="@QRByte" style="width: 25mm; height: 25mm; margin: 10px;" />

        @if (vGatePass?.ImageData != null)
        {
            var base64String = Convert.ToBase64String(vGatePass.ImageData);
            var imageUrl = $"data:image/{GetImageFormat(vGatePass.ImageData)};base64,{base64String}";
            <img src="@imageUrl" style="width: 25mm; height: 25mm; margin: 10px;" />
        }
        <h2>Visitor Pass</h2>

    </div>
    <div>
        <h3>VISITOR'S RULES</h3>
        <p>Visitor ID Cards to be compulsorily exhibited by the visitor on their body throughout their visit to the premises</p>
        <p>@vGatePass?.Name</p>
    </div>



</div>

<button @onclick="PrintDiv">Print</button>*@

<!---------------------------------------------------------------------------------------------Security Approval Model--------------------------------->
<div class="modal fade" id="securityModel" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="securityModelLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" style="max-width: 400px !important;">
        <div class="modal-content" style="background-color:#d3d3d3; border-radius: 0px !important;box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.4) !important;">

            <div class="modal-body px-5">
                <div class="d-flex justify-content-between">
                    <h6>@vSecurityApproval?.VisitorData.FirstName @vSecurityApproval?.VisitorData.LastName   @vSecurityApproval?.VisitingDetails.VisitDate To @vSecurityApproval?.VisitingDetails.ToDate</h6>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <hr style="color:black" />
                <div class="pb-3" style="font-family: 'Lato', sans-serif;">
                    <label class="fs-5 form-check-label" style="font-family: 'Lato', sans-serif;">
                        <input type="checkbox" class="form-check-input me-2" @bind-value="securityApproval" /> Contacted to Approver on Call
                    </label><br />

                </div>
                <div style="display: flex;justify-content: flex-end;">
                    <button type="button" class="button-14" data-bs-dismiss="modal" @onclick="()=>SecurityApprovalUpdate(vSecurityApproval?.VisitingDetails.VisitorId, vSecurityApproval.VisitingDetails.VisitDate, vSecurityApproval.VisitingDetails.ToDate, vSecurityApproval.VisitingDetails.VisitTime, vSecurityApproval.VisitingDetails.Id)">Approve</button>
                    <button type="button" class="button-14" data-bs-dismiss="modal">Back</button>
                </div>
            </div>

        </div>
    </div>
</div>


<!---------------------------------------------------------------------------------------------Safety Check Model------------------------------------>
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" style="max-width: 400px !important;">
        <div class="modal-content" style="background-color:#d3d3d3; border-radius: 0px !important;box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.4) !important;">

            <div class="modal-body px-5">
                <div class="d-flex justify-content-between">
                    <h6>@vCheckSafety?.VisitorData.FirstName @vCheckSafety?.VisitorData.LastName   @vCheckSafety?.VisitingDetails.VisitDate</h6>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <hr style="color:black" />
                <div class="pb-3" style="font-family: 'Lato', sans-serif;">
                    <label class="fs-5 form-check-label" style="font-family: 'Lato', sans-serif;">
                        <input type="checkbox" class="form-check-input me-2" @bind-value="safetyShoe" /> Safety Shoes
                    </label><br/>
                    <label class="fs-5 form-check-label">
                        <input type="checkbox" class=" form-check-input me-2" @bind-value="safetyGoggle" /> Safety Goggle
                    </label><br />
                    <label class="fs-5 form-check-label">
                        <input type="checkbox" class=" form-check-input me-2" @bind-value="safetyVideo" /> Safety Video
                    </label>
                </div>
                <div style="display: flex;justify-content: flex-end;">
                    <button type="button" class="button-14" data-bs-dismiss="modal" @onclick="()=>SafetyCheckUpdate(vCheckSafety?.VisitingDetails.VisitorId, vCheckSafety.VisitingDetails.VisitDate, vCheckSafety.VisitingDetails.ToDate, vCheckSafety.VisitingDetails.Id)">OK</button>
                    <button type="button" class="button-14" data-bs-dismiss="modal">Back</button>
                </div>
            </div>

        </div>
    </div>
</div>

<!---------------------------------------------------------------------------------------------Safety Check Model Admin Area------------------------------------>
<div class="modal fade" id="staticBackdropAdmin" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" style="max-width: 400px !important;">
        <div class="modal-content" style="background-color:#d3d3d3; border-radius: 0px !important;box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.4) !important;">

            <div class="modal-body px-5">
                <div class="d-flex justify-content-between">
                    <h6>@vCheckSafety?.VisitorData.FirstName @vCheckSafety?.VisitorData.LastName   @vCheckSafety?.VisitingDetails.VisitDate</h6>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <hr style="color:black" />
                <div class="pb-3" style="font-family: 'Lato', sans-serif;">
                    <label class="fs-5 form-check-label" style="font-family: 'Lato', sans-serif;">
                        <input type="checkbox" class="form-check-input me-2" @bind-value="adminAreaVerification" /> Verify Admin Area
                    </label><br />

                </div>
                <div style="display: flex;justify-content: flex-end;">
                    <button type="button" class="button-14" data-bs-dismiss="modal" @onclick="()=>SafetyCheckUpdate(vCheckSafety?.VisitingDetails.VisitorId, vCheckSafety.VisitingDetails.VisitDate, vCheckSafety.VisitingDetails.ToDate, vCheckSafety.VisitingDetails.Id)">OK</button>
                    <button type="button" class="button-14" data-bs-dismiss="modal">Back</button>
                </div>
            </div>

        </div>
    </div>
</div>

<!----------------------------------------------------GatePass Model-------------------------------------------------------------------------->

<div class="modal fade" id="exampleModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Gate Pass</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div style="display: flex; justify-content: center; align-items: center;">
                    <div id="printableDiv" class="A6">
                        <div style="border: 1px solid black;">
                            <div class="row px-2" style="margin-bottom: 0 !important;">
                                <div class="col-10">
                                    <img src="/RehlkoLogo/rehlko_logo_horiz_new_energy_blue_RGB.png" width="120px" style="padding:0px 0px 0px 0px;" />
                                    @*    <p style="font-size: 8px"> Rehlko Energy India Pvt. Ltd. <br />J-2/1, MIDC Industrial Area, Chikhalthana, Chhatrapati Sambhajinagar, 431006</p> *@
                                    <p style="font-size: 8px;">
                                        Rehlko Energy India Pvt. Ltd. <br />
                                        <span style="font-size: 7px;">J-2/1, MIDC Industrial Area, Chikhalthana, Chhatrapati Sambhajinagar, 431006</span>
                                    </p>
                                </div>
                                <div class="col-2">
                                    <img src="/images/nosmoke.png" height=25px width=25px style="padding: 2px;" >
                                    <img src="/images/nocam.png" height=25px width=25px style="padding: 2px;">
                                    <img src="/images/nomob.png" height=25px width=25px style="padding: 2px;">
                                </div>


                            </div>


                            <div class="row mb-2" style="margin-top: 0 !important; padding: 0 !important">

                                <div class="col-5 pe-0 me-0">
                                    @if (vGatePass?.VisitorData.ImageData != null)
                                    {
                                        var base64String = Convert.ToBase64String(vGatePass.VisitorData.ImageData);
                                        var imageUrl = $"data:image/{GetImageFormat(vGatePass.VisitorData.ImageData)};base64,{base64String}";
                                        <img src="@imageUrl" style="width: 17mm; height: 17mm;  border-radius: 50%; margin: 5px;" />
                                    }
                                    <img src="@QRByte" style="width: 16mm; height: 16mm; margin: 3px; margin-right: 0;" />

                                </div>
                                <div class="col-7 pe-0 me-0">
                                    <p class="margindef" style=" margin: 0;padding: 0;"><small>ID: @vGatePass?.VisitingDetails.Id</small></p>
                                    <p class="margindef" style=" margin: 0;padding: 0;"><b><span>@(vGatePass?.VisitorData.FirstName?.Trim().Split(" ").FirstOrDefault())</span> <span>@(vGatePass?.VisitorData.LastName?.Trim().Split(" ").LastOrDefault())</span></b></p>
                                    <p class="margindef" style=" margin: 0;padding: 0;">@vGatePass?.VisitorData.Company</p>
                                </div>


                            </div>
                            <div class="row px-4 mb-2">

                                <div class="col-6">
                                    <p style=" margin: 0;padding: 0; font-size: 13px;">To: @vGatePass?.VisitingDetails.ApprovedBy?.Trim().Split(" ").FirstOrDefault() @vGatePass?.VisitingDetails.ApprovedBy?.Trim().Split(" ").LastOrDefault()</p>

                                </div>
                                <div class="col-6">
                                    @if(dData is not null)
                                    {
                                        var deptName = dData.Where(x => x.DeptId == vGatePass?.VisitingDetails.CompanyDepartment).Select(y => y.DeptName).FirstOrDefault();
                                        var shortDeptName = string.IsNullOrEmpty(deptName)
                                        ? string.Empty
                                        : deptName.Contains(" ")
                                        ? string.Concat(deptName.Split(' ').Select(word => word[0]))
                                        : deptName.ToString();

                                        <p style=" margin: 0;padding: 0;font-size: 13px;">Dept: @shortDeptName</p>
                                    }


                                </div>

                                <div class="col-6">
                                    <p style=" margin: 0;padding: 0;font-size: 14px;">Date: @vGatePass?.VisitingDetails.VisitDate</p>
                                </div>
                                <div class="col-6">
                                    @if(vGatePass?.VisitingDetails is not null)
                                    {
                                        <p style=" margin: 0;padding: 0;font-size: 14px;">Time: @DateTime.Parse(vGatePass?.VisitingDetails.VisitTime!).ToShortTimeString()</p>
                                    }

                                </div>
                                <div class="col-6">
                                    <p style=" margin: 0;padding: 0;font-size: 14px;">Duration: @vGatePass?.VisitingDetails.Duration</p>
                                </div>
                                <div class="col-6">
                                    @{
                                        var purPose = vGatePass?.VisitingDetails.Purpose;
                                        var shortPurpose = string.IsNullOrEmpty(purPose) ? string.Empty : purPose.Trim().Split(" ")[0];
                                    }
                                    <p style=" margin: 0;padding: 0;font-size: 14px;">Purpose: @shortPurpose</p>
                                </div>
                                <div class="col-6" >
                                    <p style=" margin: 0;padding: 0;font-size: 14px;">Mobile: @vGatePass?.VisitorData.MobileNo </p>
                                </div>
                                <div class="col-6">
                                    @{
                                        var addRase = vGatePass?.VisitorData.Address;
                                        var shortAddr = string.IsNullOrEmpty(addRase) ? string.Empty : (addRase.Length <= 40 ? addRase : addRase.Substring(0, 40));
                                    }
                                    <p style=" margin: 0;padding: 0;font-size: 10px;"><b>Address:</b>  @shortAddr</p>
                                </div>



                            </div>
                            <div class="row px-2">
                                <p class="fs-6 mb-0">VISITOR'S RULES</p> <!--&#8226;-->
                                <p style="font-size: 7px;line-height: 1; text-align:justify;">
                                    Visitor ID Cards to be compulsorily exhibited by the visitor on their body throughout their visit to the premises<br/>
                                    Visitors to the shop floor areas will be required to wear Closed-toed shoes.Under no circumstances will anyone be permitted in the Shop floor area with open-toed dress shoes or sandals. Visitors not having steel-toed shoes are required to remail within yellow safety lines.<br />
                                    Visitors to our production area will be offered hearing PPE to be used at their discretion.<br />
                                    Visitors to our production areas must be aware of fork truck and overhead crane movements.
                                    Those Visitors remaining in our office area are not required to comply with the above requirements.<br />
                                    Consumption of Tobacco Products, including Smoking is strictly prohibited withing within the factory premises.<br />
                                    Vehicles without valid PUC Certificate and Driving licenses are not allowed to enter the premises.<br />
                                    Two wheeler riders without Helmets, and 4 wheeler without Seat belts will not be allowed to enter the plant.<br />
                                    In case of emergency, be with person whom you addressed, or
                                </p>
                                <p style="font-size: 10px;line-height: 0.8;"><b>Emergency Contact: 9028378904/02406640229</b></p>

                            </div>

                            <div class="row mt-3 px-2">
                                <div class="col-6">
                                    <span style="text-align:left;"> Visitor Sign</span>
                                </div>
                                <div class="col-6" style="text-align:right;">
                                    <span style="text-align:right;"> Auth. Sign</span>
                                </div>

                            </div>

                        </div>

                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="PrintDiv">Print</button>
            </div>
        </div>
    </div>
</div>


@*-----------------------------------------------------------------Photo Model----------------------------------------------------------------------------------------*@
<div class="modal fade" id="photoModel" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="photoModel" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content" style="background-color:#d3d3d3; border-radius: 0px !important;box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.4) !important;">

            <div class="modal-body px-5">
                <div class="d-flex justify-content-between">

                    <h6>Photo</h6>

                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="HideModel"></button>
                </div>
                <hr style="color:black" />
                <div class="pb-3" style="font-family: 'Lato', sans-serif;">

                    <img src="@PhotoModelUrl" width="200" height="200" alt="Visitor" class="rounded mx-auto d-block" />

                </div>
                @* <div style="display: flex;justify-content: flex-end;">
                    <button type="button" class="button-14" data-bs-dismiss="modal">OK</button>


                    <button type="button" class="button-14" data-bs-dismiss="modal" @onclick="HideModel">Back</button>
                </div> *@
            </div>

        </div>
    </div>
</div>


<!---------------------------------------------------------------------------------------------Delete Model--------------------------------->
<div class="modal fade" id="deleteVDetails" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="deleteVDetailsLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" style="max-width: 400px !important;">
        <div class="modal-content" style="background-color:#d3d3d3; border-radius: 0px !important;box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.4) !important;">

            <div class="modal-body px-5">
                <div class="d-flex justify-content-between">
                    <h6>@vDetailsDelete?.VisitorId @vDetailsDelete?.VisitDate To @vDetailsDelete?.ToDate</h6>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <hr style="color:black" />
                <div class="pb-3" style="font-family: 'Lato', sans-serif;">
                    <label class="fs-5 form-check-label" style="font-family: 'Lato', sans-serif;">
                        <input type="checkbox" class="form-check-input me-2" @bind-value="detailsDelete" /> Are you sure to delete appointment?
                    </label><br />

                </div>
                <div style="display: flex;justify-content: flex-end;">
                    <button type="button" class="button-14" data-bs-dismiss="modal" @onclick="()=>DeleteVDetailsFromDB(vDetailsDelete.Id)">Delete</button>
                    <button type="button" class="button-14" data-bs-dismiss="modal">Back</button>
                </div>
            </div>

        </div>
    </div>
</div>


<div class="modal fade" id="exampleModalVid" tabindex="-1" aria-labelledby="exampleModalVidLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">

                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div style="display: flex; justify-content: center; align-items: center;">
                    @if (!string.IsNullOrWhiteSpace(vcFrame))
                    {
                        <video id="videoFeed" width="240" height="240" />
                        <canvas class="d-none" id="currentFrame" width="240" height="240" />

                    }
                </div>


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModelVideo" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="CaptureFrame" data-bs-dismiss="modal">Capture</button>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<VisitorMasterModel>? vData = null;
    List<DeptData>? dData = null;
    List<EmpData>? eData = null;
    List<VisitorTransactionModel>? vTransactions = null;

    string imageUrl = string.Empty;

    bool processing = false;
    List<VisitingDetailsModel>? vDetails = null;

    public class VisitorDataAndDetailsModel
    {
        public VisitorMasterModel VisitorData { get; set; }
        public VisitingDetailsModel VisitingDetails { get; set; }
    }
    List<VisitorDataAndDetailsModel>? combinedData = null;


    List<VisitorDataAndDetailsModel>? filteredvisitors = null;

    private VisitorDataAndDetailsModel? vGatePass = null;
    private VisitorDataAndDetailsModel? vCheckSafety = null;
    private VisitorDataAndDetailsModel? vSecurityApproval = null;



    string _securityMail = string.Empty;
    public string _role { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {

        var authenticationState = await authenticationStateTask;

        var empData = vmsDbContext.Employee.Where(x => x.EmpEmail.ToLower() == authenticationState.User.Identity.Name).FirstOrDefault();


        var claimsIdentity = authenticationState.User.Identity as ClaimsIdentity;
        if (claimsIdentity != null)
        {
            var role = claimsIdentity.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
            _role = role;
            if(_role == "Security")
            {
                _securityMail = empData.EmpEmail;
            }

        }


        var todayDate = DateOnly.FromDateTime(DateTime.Now); ;
        dData = await VDataService.GetDeptData();
        eData = await VDataService.GetEmpData();
        vData = await VDataService.GetAllVisitorData();
        vDetails = await VDataService.GetDateWiseVisitingDetails(todayDate);

        combinedData = vData.Join(vDetails, vd => vd.VisitorId, vd => vd.VisitorId,
       (vd, vdd) => new VisitorDataAndDetailsModel
           {
               VisitorData = vd,
               VisitingDetails = vdd
           }).ToList();

        //combinedData = combinedData.Where(x => x.VisitingDetails.Approval == "Approved").ToList();


        //vDetails = vDetails.Where(x => vData.Select(y => y.VisitorId).Contains(x.VisitorId)).ToList();

        /* vDetails = from detail in vDetails
                     join data in vData on detail.VisitorId equals data.VisitorId
                     select detail;*/

        filteredvisitors = combinedData.ToList();
        //vDetails = vDetails.Where(x => filteredvisitors.Select(y => y.VisitorId).Contains(x.VisitorId)).ToList();
        vTransactions = await VDataService.GetAllVisitorTransactions();
    }

    void UpdateFilteredVisitors(string searchVstr)
    {
        if (string.IsNullOrEmpty(searchVstr))
        {
            filteredvisitors = combinedData?.ToList();
        }
        else
        {
            filteredvisitors = combinedData?.Where(
                v => v.VisitorData.FirstName.Contains(searchVstr, StringComparison.OrdinalIgnoreCase)


            )
            .ToList();
        }
    }

    private string searchVisitor = string.Empty;

    private List<VisitorDataAndDetailsModel> filteredvisitor => combinedData!.Where(
                v => v.VisitorData.FirstName.Contains(searchVisitor, StringComparison.OrdinalIgnoreCase) || v.VisitorData.LastName.Contains(searchVisitor, StringComparison.OrdinalIgnoreCase) || v.VisitorData.MobileNo.Contains(searchVisitor, StringComparison.OrdinalIgnoreCase) || v.VisitorData.IdProofNo.Contains(searchVisitor, StringComparison.OrdinalIgnoreCase)).ToList();



    public string? QRCodeText { get; set; }
    public string QRByte = "";

    public void GenerateQRCode()
    {
        @*
        if (!string.IsNullOrEmpty(QRCodeText))
        {
            using MemoryStream ms = new();
            QRCodeGenerator qrCodeGenerate = new();
            QRCodeData qrCodeData = qrCodeGenerate.CreateQrCode(QRCodeText, QRCodeGenerator.ECCLevel.Q);
            QRCode qrCode = new(qrCodeData);
            using Bitmap qrBitMap = qrCode.GetGraphic(20);
            qrBitMap.Save(ms, ImageFormat.Png);
            string base64 = Convert.ToBase64String(ms.ToArray());
            QRByte = string.Format("data:image/png;base64,{0}", base64);
        }*@
    }

    public async void CreateGatePass(int vdId)
    {
        vGatePass = await Task.FromResult(filteredvisitors?.FirstOrDefault(x => x.VisitingDetails.Id == vdId));
        QRCodeText = (vGatePass.VisitingDetails.VisitorId).ToString();
        if (!string.IsNullOrEmpty(QRCodeText))
        {
            using MemoryStream ms = new();
            QRCodeGenerator qrCodeGenerate = new();
            QRCodeData qrCodeData = qrCodeGenerate.CreateQrCode(QRCodeText, QRCodeGenerator.ECCLevel.Q);
            QRCode qrCode = new(qrCodeData);
            using Bitmap qrBitMap = qrCode.GetGraphic(20);
            qrBitMap.Save(ms, ImageFormat.Png);
            string base64 = Convert.ToBase64String(ms.ToArray());
            QRByte = string.Format("data:image/png;base64,{0}", base64);
        }

        StateHasChanged();


        await Task.Delay(100);

        //await PrintDiv();
    }

    private bool safetyShoe { get; set; }
    private bool safetyGoggle { get; set; }
    private bool safetyVideo { get; set; }
    private bool adminAreaVerification { get; set; }

    public async void SafetyCheck(string vdId, DateOnly vdDate, int id)
    {
        vCheckSafety = await Task.FromResult(filteredvisitors?.FirstOrDefault(x => x.VisitingDetails.VisitorId == vdId && x.VisitingDetails.VisitDate == vdDate && x.VisitingDetails.Id == id));
    }
    public async Task SafetyCheckUpdate(string vdId, DateOnly vDate, DateOnly tDate, int id)
    {
        processing = true;
        _ = InvokeAsync(() =>           // Renders the screen when message to be set
            {
                StateHasChanged();
            });
        if ((safetyShoe && safetyGoggle && safetyVideo) || adminAreaVerification)
        {
            await VDataService.UpdateSafetStatus(vdId, vDate, tDate, id);

        }
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private bool securityApproval { get; set; }
    public async void SecurityApproval(string vdId, DateOnly vdDate, int id)
    {
        vSecurityApproval = await Task.FromResult(filteredvisitors?.FirstOrDefault(x => x.VisitingDetails.VisitorId == vdId && x.VisitingDetails.VisitDate == vdDate && x.VisitingDetails.Id == id));
    }

    public async Task SecurityApprovalUpdate(string vdId, DateOnly vDate, DateOnly tDate, string vTime, int id)
    {
        processing = true;
        _ = InvokeAsync(() =>           // Renders the screen when message to be set
            {
                StateHasChanged();
            });
        if (securityApproval)
        {
            await VDataService.UpdateSecurityApproval(vdId, vDate, tDate, id);

            await SendEmailSecurityApproval(vdId, vDate, tDate, vTime, id);
        }
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }


    private async Task PrintDiv()
    {

        await JS.InvokeAsync<object>("printDiv", "printableDiv");
    }

    string PhotoModelUrl = string.Empty;
    int GetVId;
    private async Task ShowPhoto(byte[] purl, int vID)
    {
        var base64String = Convert.ToBase64String(purl);
        imageUrl = $"data:image/{GetImageFormat(purl)};base64,{base64String}";
        PhotoModelUrl = imageUrl;
        GetVId = vID;
        await JS.InvokeVoidAsync("showModal");
    }

    protected async Task HideModel()
    {
        try
        {
            //NavigationManager.NavigateTo(NavigationManager.Uri, true);
            await JS.InvokeVoidAsync("hideModal");
            _ = InvokeAsync(() =>           // Renders the screen when message to be set
            {
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {

        }

    }
    private string frameUri;
    private string vcFrame;

    private async Task StartVideo(int vID)
    {
        vcFrame = "true";
        GetVId = vID;
        await JS.InvokeVoidAsync("startVideo", "videoFeed");
    }
    private async Task CaptureFrame(MouseEventArgs e)
    {
        processing = true;
        _ = InvokeAsync(() =>           // Renders the screen when message to be set
            {
                StateHasChanged();
            });
        await JS.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
        await JS.InvokeVoidAsync("stopVideo", "videoFeed");
        vcFrame = string.Empty;

        await VDataService.UpdateVisitorPhoto(GetVId, ImageData);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);


    }

    private async Task CloseModelVideo()
    {
        await JS.InvokeVoidAsync("stopVideo", "videoFeed");
        _ = InvokeAsync(() =>
       {
           StateHasChanged();
       });
    }

    byte[]? ImageData;


    [JSInvokable]
    public void ProcessImage(string imageString)
    {
        byte[] imageData = Convert.FromBase64String(imageString.Split(',')[1]);

        //Do image processing here

        var drawingOptions = new DrawingOptions()
            {
                GraphicsOptions = new GraphicsOptions()
                {

                }
            };




        using (var image = SixLabors.ImageSharp.Image.Load(imageData))
        {
            var width = image.Width;
            var height = image.Height;
            var resizeOptions = new ResizeOptions()
                {
                    Mode = SixLabors.ImageSharp.Processing.ResizeMode.Pad,
                    PadColor = SixLabors.ImageSharp.Color.Black,
                    Size = new SixLabors.ImageSharp.Size(width, height),
                    Position = AnchorPositionMode.TopLeft

                };
            image.Mutate(x => x
                .Flip(FlipMode.Horizontal) //To match mirrored webcam image
                .Resize(resizeOptions)

            );

            ImageData = imageData;

            frameUri = image.ToBase64String(JpegFormat.Instance);
            PhotoModelUrl = frameUri;
            imageUrl = frameUri;

        }
    }

    private string GetImageFormat(byte[] imageData)
    {
        if (imageData[0] == 0x89 && imageData[1] == 0x50 && imageData[2] == 0x4E && imageData[3] == 0x47)
        {
            return "png";
        }
        else if (imageData[0] == 0xFF && imageData[1] == 0xD8)
        {
            return "jpeg";
        }
        else
        {
            return "jpeg";
        }
    }



    //string path = "https://www.clarke-energy.com/wp-content/uploads/2020/03/Rehlko-logo.png";
    string path = "https://storage-thumbnails.bananatag.com/images/zl87f1/540a6d27531184a3444375abe426bbc0.gif";
    private async Task SendEmailSecurityApproval(string vdId, DateOnly vDate, DateOnly tDate, string vTime, int id)
    {
        //-------------------------------Email to Approver------------------------------------To Visit--------------------\
        var empName = vDetails.Where(x => x.VisitorId == vdId && x.VisitDate == vDate && x.ToDate == tDate && x.Id == id).Select(y => y.ApprovedBy).FirstOrDefault();
        var empEmail = vmsDbContext.Employee.Where(x => x.EmpName == empName).Select(x => x.EmpEmail).FirstOrDefault();

        var mailMessage = new MimeMessage();

        mailMessage.From.Add(new MailboxAddress("VMS", "RehlkoVMS@rehlko.com"));
        mailMessage.To.Add(new MailboxAddress("VMS", empEmail));


        mailMessage.Subject = $"Rehlko Appointment Approval Status";

        var bodyBuilder = new BodyBuilder();
        bodyBuilder.HtmlBody = $@"
            <html>
                <body>
                    <p>Hello,</p>
                    <p>The following visitor request for appointment has been approved by Security Site.</p>

                    <table style='border: 1px solid #ccc; background-color: skyblue;'>
                        <tr>
                            <th style='border: 1px solid #ccc;'>VisitorId</th>
                            <th style='border: 1px solid #ccc;'>Visit Date</th>
                            <th style='border: 1px solid #ccc;'>Visit Time</th>
                            <th style='border: 1px solid #ccc;'>To Date</th>



                        </tr>
                        <tr>
                            <td style='border: 1px solid #ccc;'>{vdId}</td>
                            <td style='border: 1px solid #ccc;'>{vDate}</td>
                            <td style='border: 1px solid #ccc;'>{vTime}</td>
                            <td style='border: 1px solid #ccc;'>{tDate}</td>

                        </tr>

                    </table>
                    <p style='margin-top:1rem'>
                        Thank You
                    </p>
                    <div style='text-align:left;; background-color: skyblue'>
                        <img src={path}>
                    </div>



            </body>
            </html>
        ";

        mailMessage.Body = bodyBuilder.ToMessageBody();

        using (var client = new SmtpClient())
        {
            await client.ConnectAsync("mailhost.kohlerco.com", 25, MailKit.Security.SecureSocketOptions.StartTls);
            // await client.AuthenticateAsync("rupali.awati@kohler.com", "joewomthjbxxgepm");
            await client.SendAsync(mailMessage);
            await client.DisconnectAsync(true);
        }
    }




    private VisitingDetailsModel? vDetailsDelete = null;
    private bool detailsDelete { get; set; }
    public async void DeleteVDet(int Id)
    {
        vDetailsDelete = await Task.FromResult(vDetails?.FirstOrDefault(x => x.Id == Id));
    }

    public async Task DeleteVDetailsFromDB(int Id)
    {
        processing = true;
        _ = InvokeAsync(() =>           // Renders the screen when message to be set
            {
                StateHasChanged();
            });
        if (detailsDelete)
        {
            await VDataService.DeleteVisitorData(Id);

        }
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    
}



