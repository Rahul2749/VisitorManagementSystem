@page "/login"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using VisitorManagementSystem.Data
@using VisitorManagementSystem.Models.LoginModels


@inject VMSDbContext vmsDbContext

@inject NavigationManager navigationManager




<style>
    /* Importing fonts from Google */


    /* Reseting */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Poppins', sans-serif;
    }

    body {
        background: #ecf0f3;
    }

    .wrapper {
        max-width: 350px;
        min-height: 500px;
        margin: 80px auto;
        padding: 40px 30px 30px 30px;
        background-color: #ecf0f3;
        border-radius: 15px;
        box-shadow: 13px 13px 20px #cbced1, -13px -13px 20px #fff;
    }

    .logo {
        /*width: 110px;*/
        width: 80px;
        margin: auto;
    }

        .logo img {
            /*width: 100%;
            height: 35px;
            object-fit: contain;*/
            width: 80px;
            height: 80px;
            object-fit: scale-down;
            border-radius: 50%; /*Circle*/
            
        box-shadow: 0px 0px 3px #5f5f5f,
            0px 0px 0px 5px #ecf0f3,
            8px 8px 15px #a7aaa7,
                -8px -8px 15px #fff; 
        }

    .wrapper .name {
        font-weight: 600;
        font-size: 1.4rem;
        letter-spacing: 1.3px;
        padding-left: 10px;
        color: #555;
    }

    .wrapper .form-field input {
        width: 100%;
        display: block;
        border: none;
        outline: none;
        background: none;
        font-size: 1.2rem;
        color: #666;
        padding: 10px 15px 10px 10px;
        /* border: 1px solid red; */
    }

    .wrapper .form-field {
        padding-left: 10px;
        margin-bottom: 20px;
        border-radius: 20px;
        box-shadow: inset 8px 8px 8px #cbced1, inset -8px -8px 8px #fff;
    }

        .wrapper .form-field .fas {
            color: #555;
        }

    .wrapper .btn {
        box-shadow: none;
        width: 100%;
        height: 40px;
        background-color: #03A9F4;
        color: #fff;
        border-radius: 25px;
        box-shadow: 3px 3px 3px #b1b1b1, -3px -3px 3px #fff;
        letter-spacing: 1.3px;
    }

        .wrapper .btn:hover {
            background-color: #039BE5;
        }

    .wrapper a {
        text-decoration: none;
        font-size: 0.8rem;
        color: #03A9F4;
    }

        .wrapper a:hover {
            color: #039BE5;
        }

    
</style>


<PageTitle>
    Login
</PageTitle>



<div class="wrapper">
    <div class="logo">
        <img src="/rehlkologo/rehlko_symbol_graphic_new_energy_blue_rgb.png" alt="">
    </div>
    <div class="text-center mt-4 name">
        Login
    </div>
    <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm1" class="p-3 mt-3">
        <DataAnnotationsValidator />
        <div class="form-field d-flex align-items-center">
            <span class="far fa-user"></span>
            <InputText @bind-Value="Model.Email" class="form-control" placeholder="Email" />
            
        </div>
        <ValidationMessage For="() => Model.Email" />
        <div class="form-field d-flex align-items-center">
            <span class="fas fa-key"></span>
            <InputText @bind-Value="Model.Password" type="password" id="form2Example2" class="form-control" placeholder="Password" />
            
        </div>
        <ValidationMessage For="() => Model.Password" />
        <div class="mb-3 text-center">
            <span class="text-danger">@errorMessage</span>
        </div>
        <button type="submit" class="btn mt-3">Login</button>

    </EditForm>
    <div class="text-center fs-6">
        <a href="forgetpassword">Forget password?</a> or <a href="#">Sign up</a>
    </div>
</div>


@code {
    [CascadingParameter]
    public HttpContext? HttpContext{ get; set; }


    [SupplyParameterFromForm]

    public LoginModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var userAccount = vmsDbContext.Employee.Where(x => x.EmpEmail.ToLower() == Model.Email.ToLower()).FirstOrDefault();
        if (userAccount is null || userAccount.Password != Model.Password)
        {
            errorMessage = "Invalid User Name or Password";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.Email.ToLower()),
            new Claim(ClaimTypes.Role, userAccount.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);


        var returnUrl = navigationManager.Uri;
        if (returnUrl.Contains("visitorRequest"))
        {
            navigationManager.NavigateTo("/visitorRequest", forceLoad: true);
        }
        else{
            navigationManager.NavigateTo("/");
        }
      
    }

}
