@page "/reports"


@inject IVDataService VDataService


@using ClosedXML.Excel
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using VisitorManagementSystem.Data

@inject VMSDbContext vmsDbContext

@rendermode InteractiveServer
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Admin, User, Security")]



<style>
    .list-group-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .float-right {
        margin-left: auto;
    }

    .float-left {
        margin-right: auto;
    }


    .loader {
        position: relative;
        width: 250px;
        height: 250px;
        border-radius: 50%;
        background: linear-gradient(#f07e6e, #84cdfa, #5ad1cd);
        animation: animate 1.2s linear infinite;
    }

    @@keyframes animate {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .loader span {
        position: absolute;
        width: 100%;
        height: 100%;
        border-radius: 50%;
        background: linear-gradient(#f07e6e, #84cdfa, #5ad1cd);
    }

    .loader-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-left: 7%;
        z-index: 1000; /* make sure it's on top of other elements */
    }

    .loader span:nth-child(1) {
        filter: blur(5px);
    }

    .loader span:nth-child(2) {
        filter: blur(10px);
    }

    .loader span:nth-child(3) {
        filter: blur(25px);
    }

    .loader span:nth-child(4) {
        filter: blur(50px);
    }

    .loader:after {
        content: '';
        position: absolute;
        top: 10px;
        left: 10px;
        right: 10px;
        bottom: 10px;
        background: #f1f1f1;
        border: solid white 10px;
        border-radius: 50%;
    }


    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* adjust the opacity to your liking */
        z-index: 1000; /* make sure it's on top of everything else */
    }



    .downloadText {
  position: relative;
  font-family: sans-serif;
  font-size: 15px;
  text-transform: uppercase;
  letter-spacing: 2px;
  overflow: hidden;
  background: linear-gradient(90deg, #000, #fff, #000);
  background-repeat: no-repeat;
  background-size: 80%;
  animation: animateP 3s linear infinite;
  -webkit-background-clip: text;
  -webkit-text-fill-color: rgba(255, 255, 255, 0);
}

@@keyframes animateP {
  0% {
    background-position: -500%;
  }
  100% {
    background-position: 500%;
  }
}
</style>

<script>
    function downloadFile(fileName, content) {
        const blob = new Blob([content], { type: 'application/octet-stream' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        a.click();
        URL.revokeObjectURL(url);
    }
</script>

<PageTitle>
    Reports
</PageTitle>

<div class="container-fluid">

    @if(downloading == true)
    {
        <div class="overlay" />
        <div class="loader-container">
            <div class="loader">

                <span></span>
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
        <div class="loader-container">
            <p class="downloadText">Downloading...</p>
        </div>
    }



    <div>
        <h4 class="h3 mb-0 text-gray-800" style="text-shadow: 1px 1px 2px rgba(0,0,0,0.5);font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif">Reports</h4>

    </div>
    <div class="mt-3">
        <ul class="list-group list-group-flush list-group-numbered">
            <li class="list-group-item">
                <span class="float-left">
                    <button class="btn btn-link" @onclick="ExportToExcel">Today's Report</button>
                </span>
                <!--
                @if (downloading == true)
                {
                <span class="float-right">
                    <p class="h6 text-italic" style="font-style:italic; text-shadow: 1px 1px 2px rgba(0,0,0,0.5);">Downloading...</p>
                </span>
                }-->
            </li>

            <li class="list-group-item">
                <div class="float-left d-flex justify-content-between align-items-center" style="justify-items:center">

                    <div>
                        <button class="btn btn-link" @onclick="DateWiseReport">Date Wise Report</button>
                    </div>
                    <div style="margin-left: 2rem">
                        <button class="btn">Select Date:</button>
                    </div>
                    <div style="margin-left: 1rem">
                        <input @bind="SelectedDate" type="date" class="form-control" id="selectdate" max="@dt" placeholder="@dt" />
                    </div>
                    <div style="margin-left: 1rem">
                        <button class="btn">@SelectedDate</button>
                    </div>

                </div>

            </li>

            <li class="list-group-item">
                <div class="float-left d-flex justify-content-between align-items-center" style="justify-items:center">

                    <div>
                        <button class="btn btn-link" @onclick="DateRangeReport">Date-Range Report</button>
                    </div>
                    <div style="margin-left: 2rem">
                        <button class="btn">From Date:</button>
                    </div>
                    <div style="margin-left: 1rem">
                        <input @bind="SelectedDateFrom" type="date" class="form-control" id="selectdateF" placeholder="@dt" />
                    </div>
                    <div style="margin-left: 2rem">
                        <button class="btn">To Date:</button>
                    </div>
                    <div style="margin-left: 1rem">
                        <input @bind="SelectedDateTo" type="date" class="form-control" id="selectdateT" max="@dt" placeholder="@dt" />
                    </div>
                   

                </div>

            </li>
            
            <li class="list-group-item">
                <span class="float-left">
                    <button class="btn btn-link" @onclick="MonthlyReport">Month Wise Report</button>
                </span>

            </li>
            <li class="list-group-item">
                <span class="float-left">
                    <button class="btn btn-link" @onclick="YearlyReport">Year Wise Report</button>
                </span>

            </li>

        </ul>
    </div>
</div>

@code {
    List<VisitorMasterModel>? vData = null;
    List<VisitingDetailsModel>? vDetailsToday = null;
    List<VisitingDetailsModel>? vDetailsMonthly = null;
    List<VisitingDetailsModel>? vDetailsYearly = null;
    List<VisitingDetailsModel>? vDetailsDateWise = null;
    List<DeptData>? department = null;
    List<VisitorTransactionModel>? vTransactions = null;
    private string dt { get; set; } = DateTime.Now.ToString("yyyy-MM-dd");

    bool downloading = false;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }


    private string? userName;

    private Timer? _timer;



    public class VDataVDetailsVTransactionModel
    {
        public VisitorMasterModel? VisitorData { get; set; }
        public VisitingDetailsModel? VisitingDetails { get; set; }
        public VisitorTransactionModel? TransactionDetail { get; set; }
    }
    List<VDataVDetailsVTransactionModel>? combinedData = null;


    protected override async Task OnInitializedAsync()
    {

        vData = await VDataService.GetAllVisitorData();
        vDetailsToday = await VDataService.GetVisitingDetailsOnlyToday();
        vDetailsMonthly = await VDataService.GetAllVisitingDetailsMonthlyReport();
        vTransactions = await VDataService.GetVisitorTransactionsOnlyToday();


        //vDetailsToday = vDetailsToday.Where(x => x.VisitDate == DateTime.Now.ToString("yyyy-MM-dd")).ToList();
        // vData = vData.Where(x => vDetailsToday.Any(y => y.VisitorId == x.VisitorId)).ToList();



        combinedData = vData.Join(vDetailsToday, vd => vd.VisitorId, vd => vd.VisitorId,
        (vd, vdd) => new VDataVDetailsVTransactionModel
            {
                VisitorData = vd,
                VisitingDetails = vdd
            }).ToList();

        combinedData = combinedData.Join(vTransactions, vd => vd.VisitingDetails.Id, vt => vt.VDetails_Id,
       (vd, vt) => new VDataVDetailsVTransactionModel
           {
               VisitorData = vd.VisitorData,
               VisitingDetails = vd.VisitingDetails,
               TransactionDetail = vt // add TransactionDetail property to VisitorDataAndDetailsModel
           }).ToList();


        //combinedData = combinedData.Where(x => x.VisitingDetails?.VisitDate == DateTime.Now.ToString("yyyy-MM-dd")).ToList();


        department = await VDataService.GetDeptData();

        var authenticationState = await authenticationStateTask!;
        var UserName = authenticationState.User.Identity!.Name;
        var empData = vmsDbContext?.Employee?.Where(x => x.EmpEmail.ToLower() == UserName).FirstOrDefault();
        userName = empData?.EmpName;

    }





    public async Task InCompanyReport()
    {
        //await LoadData();


        combinedData = vData.Join(vDetailsToday, vd => vd.VisitorId, vd => vd.VisitorId,
            (vd, vdd) => new VDataVDetailsVTransactionModel
                {
                    VisitorData = vd,
                    VisitingDetails = vdd
                }).ToList();
        combinedData = combinedData.Join(vTransactions, vd => vd.VisitorData.VisitorId, vt => vt.VisitorId,
       (vd, vt) => new VDataVDetailsVTransactionModel
       {
           VisitorData = vd.VisitorData,
           VisitingDetails = vd.VisitingDetails,
           TransactionDetail = vt // add TransactionDetail property to VisitorDataAndDetailsModel
       }).ToList();

        combinedData = combinedData.Where(x => x.VisitingDetails?.VisitDate == DateOnly.FromDateTime(DateTime.Now) && vTransactions.Any(t => x.VisitingDetails.VisitorId == t.VisitorId && t.CheckIn is not null && t.CheckOut is null)).ToList();

        await LoadDepartmentData();
        UpdateState();
    }

    private DateOnly SelectedDate { get; set; } = DateOnly.FromDateTime(DateTime.Now.Date);
    private DateOnly SelectedDateFrom { get; set; } = DateOnly.FromDateTime(DateTime.Now.Date);
    private DateOnly SelectedDateTo { get; set; } = DateOnly.FromDateTime(DateTime.Now.Date);

    public async Task DateWiseReport()
    {
        vData = await VDataService.GetAllVisitorData();
        vDetailsDateWise = await VDataService.GetDateWiseVisitingDetailsReport(SelectedDate);
        vTransactions = await VDataService.GetVisitorTransactionsDateWise(SelectedDate);



        //vDetailsToday = vDetailsToday.Where(x => x.VisitDate == DateTime.Now.ToString("yyyy-MM-dd")).ToList();
        // vData = vData.Where(x => vDetailsToday.Any(y => y.VisitorId == x.VisitorId)).ToList();



        combinedData = vData.Join(vDetailsDateWise, vd => vd.VisitorId, vd => vd.VisitorId,
        (vd, vdd) => new VDataVDetailsVTransactionModel
            {
                VisitorData = vd,
                VisitingDetails = vdd
            }).ToList();
        combinedData = combinedData.Join(vTransactions, vd => vd.VisitingDetails.Id, vt => vt.VDetails_Id,
       (vd, vt) => new VDataVDetailsVTransactionModel
           {
               VisitorData = vd.VisitorData,
               VisitingDetails = vd.VisitingDetails,
               TransactionDetail = vt // add TransactionDetail property to VisitorDataAndDetailsModel
           }).ToList();

        await ExportToExcel();
    }

    public async Task DateRangeReport()
    {
        vData = await VDataService.GetAllVisitorData();
        vDetailsDateWise = await VDataService.GetDateRangeWiseVisitingDetailsReport(SelectedDateFrom, SelectedDateTo);
        vTransactions = await VDataService.GetVisitorTransactionsDateRangeWise(SelectedDateFrom, SelectedDateTo);



        //vDetailsToday = vDetailsToday.Where(x => x.VisitDate == DateTime.Now.ToString("yyyy-MM-dd")).ToList();
        // vData = vData.Where(x => vDetailsToday.Any(y => y.VisitorId == x.VisitorId)).ToList();



        combinedData = vData.Join(vDetailsDateWise, vd => vd.VisitorId, vd => vd.VisitorId,
        (vd, vdd) => new VDataVDetailsVTransactionModel
            {
                VisitorData = vd,
                VisitingDetails = vdd
            }).ToList();
        combinedData = combinedData.Join(vTransactions, vd => vd.VisitingDetails.Id, vt => vt.VDetails_Id,
       (vd, vt) => new VDataVDetailsVTransactionModel
           {
               VisitorData = vd.VisitorData,
               VisitingDetails = vd.VisitingDetails,
               TransactionDetail = vt // add TransactionDetail property to VisitorDataAndDetailsModel
           }).ToList();

        await ExportToExcel();
    }

    public async Task MonthlyReport()
    {

        vDetailsMonthly = await VDataService.GetAllVisitingDetailsMonthlyReport();
        vTransactions = await VDataService.GetVisitorTransactionsMonthWise();

        combinedData = vData.Join(vDetailsMonthly, vd => vd.VisitorId, vd => vd.VisitorId,
        (vd, vdd) => new VDataVDetailsVTransactionModel
            {
                VisitorData = vd,
                VisitingDetails = vdd
            }).ToList();

        combinedData = combinedData.Join(vTransactions, vd => vd.VisitingDetails.Id, vt => vt.VDetails_Id,
            (vd, vt) => new VDataVDetailsVTransactionModel
                {
                    VisitorData = vd.VisitorData,
                    VisitingDetails = vd.VisitingDetails,
                    TransactionDetail = vt // add TransactionDetail property to VisitorDataAndDetailsModel
                }).ToList();



        await LoadDepartmentData();
        UpdateState();
        await ExportToExcel();
    }



    public async Task YearlyReport()
    {
        vDetailsYearly = await VDataService.GetAllVisitingDetailsYearlyReport();
        vTransactions = await VDataService.GetVisitorTransactionsYearWise();
        combinedData = vData.Join(vDetailsYearly, vd => vd.VisitorId, vd => vd.VisitorId,
            (vd, vdd) => new VDataVDetailsVTransactionModel
                {
                    VisitorData = vd,
                    VisitingDetails = vdd
                }).ToList();

        await LoadDepartmentData();
        UpdateState();
        await ExportToExcel();
    }



    private async Task LoadDepartmentData()
    {
        department = await VDataService.GetDeptData();
    }

    private void UpdateState()
    {
        _ = InvokeAsync(() =>
        {
            StateHasChanged();
        });

    }


    protected async Task ExportToExcel()
    {
        downloading = true;
        _ = InvokeAsync(() =>
       {
           StateHasChanged();
       });
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Visitors");

        // Set header row
        var headerRow = worksheet.Row(1);
        headerRow.Cell(1).Value = "Visitor Name";
        headerRow.Cell(2).Value = "Mob";
        headerRow.Cell(3).Value = "Department";
        headerRow.Cell(4).Value = "To Visit";
        headerRow.Cell(5).Value = "Visit Date";
        headerRow.Cell(6).Value = "Visit Time";
        headerRow.Cell(7).Value = "Approval";
        headerRow.Cell(8).Value = "Checkin";
        headerRow.Cell(9).Value = "Checkout";
        /*headerRow.Cell(10).Value = "Photo";*/

        // Add data rows
        var rowIndex = 2;
        foreach (var vd in combinedData!)
        {
            var row = worksheet.Row(rowIndex);
            row.Cell(1).Value = $"{vd.VisitorData?.FirstName} {vd.VisitorData?.LastName}";
            row.Cell(2).Value = vd.VisitorData?.MobileNo;


            // Department
            foreach (var dept in department!)
            {
                if (vd.VisitingDetails?.CompanyDepartment == dept.DeptId)
                {
                    row.Cell(3).Value = dept.DeptName;
                    break;
                }
            }

            row.Cell(4).Value = vd.VisitingDetails?.ApprovedBy;
            row.Cell(5).Value = vd.VisitingDetails?.VisitDate.ToString();
            // row.Cell(6).Value = DateTime.Parse(vd.VisitingDetails?.VisitTime).ToShortTimeString();
            // Assuming vd.VisitingDetails?.VisitTime is a string that may be null
            string visitTime = vd.VisitingDetails?.VisitTime;

            // Check if visitTime is not null or empty before parsing
            if (!string.IsNullOrEmpty(visitTime))
            {
                // Parse the visit time and set the cell value
                row.Cell(6).Value = DateTime.Parse(visitTime).ToShortTimeString();
            }
            else
            {
                // Handle the case where visitTime is null or empty
                row.Cell(6).Value = "-"; // or any default value you want to set
            }
            

            // Approval
            if (vd.VisitingDetails?.Approval == "Approved" || vd.VisitingDetails?.SecurityApproval == "Yes")
            {
                row.Cell(7).Value = "Approved";
            }
            else
            {
                row.Cell(7).Value = "Error";
            }

            // Checkin and Checkout
                /*
                foreach (var vt in vTransactions!)
                {
                    if (vd.VisitingDetails?.VisitorId == vt.VisitorId)
                        {
                        if (vt.CheckIn != "")
                    {
                    row.Cell(8).Value = vt.CheckIn;
                        }
                        else
                        {
                    row.Cell(8).Value = "-";
                    }
                    if (vt.CheckOut != "")
                        {
                    row.Cell(9).Value = vt.CheckOut;
                    }
                    else
                        {
                        row.Cell(9).Value = "-";
                    }
                break;
            }
            }*/

            if (vd.TransactionDetail?.CheckIn != "")
            {
                if (vd.TransactionDetail?.Date >= vd.VisitingDetails?.VisitDate && vd.TransactionDetail?.Date <= vd.VisitingDetails?.VisitDate){

                    string chkinTime = vd.TransactionDetail?.CheckIn;

                    // Check if visitTime is not null or empty before parsing
                    if (!string.IsNullOrEmpty(chkinTime))
                    {
                        // Parse the visit time and set the cell value
                        row.Cell(8).Value = DateTime.Parse(chkinTime).ToShortTimeString();
                    }
                    else
                    {
                        // Handle the case where visitTime is null or empty
                        row.Cell(8).Value = "-"; // or any default value you want to set
                    }
                    
                }
                else{
                    row.Cell(8).Value = "-";
                }

            }
            else
            {
                row.Cell(8).Value = "-";
            }
            if (vd.TransactionDetail?.CheckOut != "")
            {
                if (vd.TransactionDetail?.Date >= vd.VisitingDetails?.VisitDate && vd.TransactionDetail?.Date <= vd.VisitingDetails?.VisitDate)
                { 
                   
                    string chkoutTime = vd.TransactionDetail?.CheckOut;

                    // Check if visitTime is not null or empty before parsing
                    if (!string.IsNullOrEmpty(chkoutTime))
                    {
                        // Parse the visit time and set the cell value
                        row.Cell(9).Value = DateTime.Parse(chkoutTime).ToShortTimeString();
                    }
                    else
                    {
                        // Handle the case where visitTime is null or empty
                        row.Cell(9).Value = "-"; // or any default value you want to set
                    }
                }
                else{
                    row.Cell(9).Value = "-";
                }
               
            }
            else
            {
                row.Cell(9).Value = "-";
            }



            /*// Photo
            if (vd.VisitorData?.ImageData != null)
                {
                var base64String = Convert.ToBase64String(vd.VisitorData.ImageData);
                var imageUrl = $"data:image/{GetImageFormat(vd.VisitorData.ImageData)};base64,{base64String}";
                // You can't add images to Excel cells using ClosedXML, so we'll skip this column
                // row.Cell(10).Value = imageUrl;
                row.Cell(10).Value = imageUrl;

            }*/

            rowIndex++;
        }


        await Task.Delay(5000);

        // Save the Excel file to a memory stream
        using var stream = new MemoryStream();
        workbook.SaveAs(stream);

        // Download the Excel file
        stream.Position = 0;
        await JS.InvokeVoidAsync("downloadFile", $"Visitor_Report_{DateTime.Now}.xlsx", stream.ToArray());

        downloading = false;
        _ = InvokeAsync(() =>
       {
           StateHasChanged();
       });
    }


}

