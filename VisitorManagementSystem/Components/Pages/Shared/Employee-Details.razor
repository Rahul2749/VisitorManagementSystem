@page "/admin"

@using Microsoft.AspNetCore.Authorization
@using VisitorManagementSystem.Data
@using VisitorManagementSystem.Models.CarriedMtrlModel
@attribute [Authorize(Roles = "Admin")]

@inject IVDataService VDataService
@inject VMSDbContext vmsDbContext
@inject IJSRuntime JS
@* @attribute [StreamRendering] *@
@rendermode InteractiveServer

@inject NavigationManager navigationManager

<PageTitle>
    All Visitors
</PageTitle>

<div class="d-flex mb-3" style="justify-content: space-between">
    <div class="">
        <h4 class="h3 mb-0 text-gray-800" style="text-shadow: 1px 1px 2px rgba(0,0,0,0.5);font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif">Employee Data</h4>

    </div>
    <div class="d-flex">
        <div class="me-2">
            <button class="btn btn-outline-info" @onclick="NewUser">Add New User</button>
        </div>
        <div class="">
            <input type="email" class="form-control" @bind="searchEmail" @bind:event="oninput" placeholder="Search by name/ko/mail" style="width: 18rem;" data-bs-toggle="dropdown" aria-expanded="false" />

        </div>
    </div>


</div>




@if (empData == null)
{
    <span>Loading...</span>
}
else if (empData.Count == 0)
{
    <span>No Data Found.</span>
}
else
{
    <table class="table table-striped table-bordered border-secondary-subtle shadow mb-sm-5 align-middle table-condensed table-sm">
        <thead class="table-primary">
            <tr>
                <th>Emp Name</th>
                <th>KO</th>
                <th>Email</th>
                <th>Contact No.</th>
                <th>Department</th>
                <th>Role</th>
                <th>Update</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var e in filteredEmp.OrderBy(x => x.EmpName))
            {

                <tr>
                    <td>@e.EmpName</td>
                    <td>@e.KO</td>
                    <td>@e.EmpEmail</td>
                    <td>@e.EmpContactNo</td>
                    @{
                        var dept = deptData.FirstOrDefault(x => e.DeptId == x.DeptId).DeptName ?? "";
                    }
                    <td>@dept</td>
                    <td>@e.Role</td>
                    <td><VisitorManagementSystem.Components.Pages.Components.EditEmpChild Id="e.EmpId" /></td>

                </tr>
            }
        </tbody>
    </table>
}





@code {


    List<EmpData>? empData = null;
    List<DeptData>? deptData = null;



    protected override async Task OnInitializedAsync()
    {

        empData = await VDataService.GetEmpData();
        deptData = await VDataService.GetDeptData();


    }






    string searchEmail = string.Empty;
    private List<EmpData> filteredEmp => empData!.Where(
            e => e.EmpName!.Contains(searchEmail, StringComparison.OrdinalIgnoreCase) || e.EmpEmail!.Contains(searchEmail, StringComparison.OrdinalIgnoreCase) || e.KO!.Contains(searchEmail, StringComparison.OrdinalIgnoreCase)).ToList();


    void NewUser()
    {
        navigationManager.NavigateTo("emp-edit");
    }

}
